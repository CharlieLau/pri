import * as fs from "fs-extra"
import * as _ from "lodash"
import * as normalizePath from "normalize-path"
import * as path from "path"
import * as prettier from "prettier"
import { pri } from "../../node"
import { md5 } from "../../utils/md5"
import {
  helperPath,
  storesPath,
  tempJsEntryPath
} from "../../utils/structor-config"

const safeName = (str: string) => _.upperFirst(_.camelCase(str))

export default (instance: typeof pri) => {
  const projectRootPath = instance.project.getProjectRootPath()

  instance.project.onAnalyseProject((files, entry) => {
    const storeFiles = files.filter(file => {
      const relativePath = path.relative(
        projectRootPath,
        path.join(file.dir, file.name)
      )

      if (!relativePath.startsWith(storesPath.dir)) {
        return false
      }

      return true
    })

    const helperAbsolutePath = path.join(
      projectRootPath,
      path.format(helperPath)
    )

    // If hasn't stores, remove helper.ts
    if (storeFiles.length === 0) {
      fs.removeSync(helperAbsolutePath)
      return
    }

    const entryRelativeToHelper = path.relative(
      path.join(tempJsEntryPath.dir),
      path.join(helperPath.dir, helperPath.name)
    )

    entry.pipeHeader(header => {
      return `
        ${header}
        import { useStrict } from "dob"
        import { Connect, Provider } from "dob-react"
        import { stores } from "${normalizePath(entryRelativeToHelper)}"
      `
    })

    entry.pipeBody(body => {
      return `
        ${body}
        useStrict()
      `
    })

    entry.pipeRenderRouter(router => {
      return `
        <Provider {...stores}>
          ${router}
        </Provider>
      `
    })

    const storesHelper = `
      import { combineStores } from "dob"

      ${storeFiles.map(storeFile => {
        const importAbsolutePath = path.join(storeFile.dir, storeFile.name)
        const importRelativePath = path.relative(
          path.join(projectRootPath, helperPath.dir),
          importAbsolutePath
        )
        return `import { ${safeName(storeFile.name)}Action, ${safeName(
          storeFile.name
        )}Store } from "${normalizePath(importRelativePath)}"`
      })}

      const stores = combineStores({${storeFiles
        .map(storeFile => {
          return `${safeName(storeFile.name)}Action, ${safeName(
            storeFile.name
          )}Store`
        })
        .join(",")}})

      export { stores }
    `

    // If has stores, create helper.ts
    fs.outputFileSync(
      helperAbsolutePath,
      prettier.format(getHelperContent(storesHelper), {
        semi: false,
        parser: "typescript"
      })
    )
  })
}

function getHelperContent(str: string) {
  return `
    /**
     * Do not edit this file.
     * This file is automatic generated to get type help.
     */
    ${str}
  `
}
