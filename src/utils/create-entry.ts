import * as fs from "fs-extra"
import * as _ from "lodash"
import * as path from "path"
import * as prettier from "prettier"
import { IProjectInfo } from "./analyse-project-interface"
import { md5 } from "./md5"
import { IProjectConfig } from "./project-config-interface"

interface IEntryText {
  pageImporter: string
  pageRoutes: string
  layoutImporter: string
  notFoundImporter: string
  notFoundRoute: string
  setEnv: string
  setCustomEnv: string
  storesImporter: string
  storesHelper: string
}

// Entry file content
const getEntryContent = (entryText: IEntryText, projectInfo: IProjectInfo, projectConfig: IProjectConfig, env: string) => {
  return `
    import { setEnvLocal, setEnvProd, setCustomEnv } from "pri"
    import * as React from "react"
    import * as ReactDOM from "react-dom"
    import Loadable from "react-loadable"
    import { Redirect, Route, Switch, Router } from "react-router-dom"
    import createBrowserHistory from 'history/createBrowserHistory'

    ${entryText.storesImporter}

    const customHistory = createBrowserHistory({
      basename: "${env === "local" ? "/" : projectConfig.baseHref}"
    })

    ${entryText.setEnv}
    ${entryText.setCustomEnv}

    ${entryText.layoutImporter}
    ${entryText.notFoundImporter}
    ${entryText.pageImporter}

    class Root extends React.PureComponent<any, any> {
      public componentWillMount() {
        ${env === "local" ? `
          window.addEventListener("message", event => {
            const data = event.data
            switch(data.type) {
              case "changeRoute":
                customHistory.push(data.path)
                break
              default:
            }
          }, false)
        ` : ""}
      }

      public render() {
        return (
          ${projectInfo.stores.length > 0 ? "<Provider {...stores}>" : ""}
          <Router history={customHistory}>
            <Switch>
              ${entryText.pageRoutes}
              ${entryText.notFoundRoute}
            </Switch>
          </Router>
          ${projectInfo.stores.length > 0 ? "</Provider>" : ""}
        )
      }
    }

    ReactDOM.render(
      <Root />,
      document.getElementById("root")
    )
  `
}

const getHelperContent = (entryText: IEntryText, info: IProjectInfo, env: string) => `
  /**
   * Do not edit this file.
   * This file is automatic generated to get type help.
   */

   ${entryText.storesHelper}
`

const safeName = (str: string) => _.upperFirst(_.camelCase(str))

export async function createEntry(info: IProjectInfo, projectRootPath: string, env: string, projectConfig: IProjectConfig) {
  const entryText: IEntryText = {
    pageImporter: "",
    pageRoutes: "",
    layoutImporter: "",
    notFoundImporter: "",
    notFoundRoute: "",
    setEnv: "",
    setCustomEnv: "",
    storesImporter: "",
    storesHelper: ""
  }

  // Set env
  switch (env) {
    case "local":
      entryText.setEnv = `setEnvLocal()`
      break
    case "prod":
      entryText.setEnv = `setEnvProd()`
      break
    default:
  }

  // Set custom env
  if (projectConfig.env) {
    entryText.setCustomEnv = `setCustomEnv(${JSON.stringify(projectConfig.env)})`
  }

  // Set routes
  info.routes.forEach(route => {
    const filePath = path.parse(route.filePath)
    const relativePageFilePath = path.relative(projectRootPath, filePath.dir + "/" + filePath.name)
    const componentName = safeName(relativePageFilePath) + md5(relativePageFilePath).slice(0, 5)

    const pathInfo = path.parse(route.filePath)

    if (info.routes.length < 2) {
      // If only one page, don't need code splitting.
      if (info.stores.length === 0) {
        entryText.pageImporter += `
          import ${componentName} from "${path.join(pathInfo.dir, pathInfo.name)}"
        `
      } else {
        entryText.pageImporter += `
          import ${componentName}Temp from "${path.join(pathInfo.dir, pathInfo.name)}"
          const ${componentName} = Connect()(${componentName}Temp)
        `
      }
    } else {
      const importCode = info.stores.length === 0 ?
        `import("${path.join(pathInfo.dir, pathInfo.name)}")` :
        `import("${path.join(pathInfo.dir, pathInfo.name)}").then(res => Connect()(res.default))  `

      entryText.pageImporter += `
        const ${componentName} = Loadable({
          loader: () => ${importCode},
          loading: () => null
        })\n
      `
    }

    const routeComponent = info.layout ? "LayoutRoute" : "Route"

    entryText.pageRoutes += `
      <${routeComponent} exact path="${route.path}" component={${componentName}} />\n
    `
  })

  // Set stores
  if (info.stores.length > 0) {
    entryText.storesImporter += `import { useStrict } from "dob"\n`
    entryText.storesImporter += `import { Connect, Provider } from "dob-react"\n`
    entryText.storesImporter += `useStrict()\n`
    entryText.storesImporter += `import { stores } from "../src/helper"\n`
    entryText.storesHelper += `import { combineStores } from "dob"\n`
    entryText.storesHelper += info.stores
      .map(eachStore => {
        const filePath = path.parse(eachStore.filePath)
        const importAbsolutePath = path.join(filePath.dir, filePath.name)
        const importRelativePath = path.relative(path.join(projectRootPath, "src"), importAbsolutePath)
        return `import { ${safeName(eachStore.name)}Action, ${safeName(eachStore.name)}Store } from "./${importRelativePath}"`
      })
      .join("\n")
    entryText.storesHelper += `
      \nconst stores = combineStores({${info.stores.map(eachStore => {
        return `${safeName(eachStore.name)}Action, ${safeName(eachStore.name)}Store`
      }).join(",")}})

      export { stores }
    `
  }

  // Set layout
  if (info.layout) {
    const layoutPath = path.parse(info.layout.filePath)
    entryText.layoutImporter = `
      import LayoutComponent from "${path.join(layoutPath.dir, layoutPath.name)}"

      const LayoutRoute = ({ component: Component, ...rest }) => {
        return (
          <Route {...rest} render={matchProps => (
            <LayoutComponent>
              <Component {...matchProps} />
            </LayoutComponent>
          )} />
        )
      };\n
    `
  }

  // Set not found
  if (info.notFound) {
    const notFoundPath = path.parse(info.notFound.filePath)
    entryText.notFoundImporter = `import NotFoundComponent from "${path.join(notFoundPath.dir, notFoundPath.name)}"`
    entryText.notFoundRoute = `
      <Route component={NotFoundComponent} />
    `
  }

  // Create entry tsx file
  const entryPath = path.join(projectRootPath, ".temp/entry.tsx")
  fs.outputFileSync(entryPath, prettier.format(getEntryContent(entryText, info, projectConfig, env), {
    semi: false,
    parser: "typescript"
  }))

  // If has stores, create helper.ts
  const helperPath = path.join(projectRootPath, "src/helper.ts")
  if (info.stores.length > 0) {
    fs.outputFileSync(helperPath, prettier.format(getHelperContent(entryText, info, env), {
      semi: false,
      parser: "typescript"
    }))
  } else {
    fs.removeSync(helperPath)
  }

  return entryPath
}
